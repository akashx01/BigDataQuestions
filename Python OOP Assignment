Q1. What is the purpose of Python's OOP?
Ans:-Object Oriented Programming is a way of computer programming using the idea of “objects” to represents data and methods. It is also, an approach used for
creating neat and reusable code instead of a redundant one. the program is divided into self-contained objects or several mini-programs.
Every Individual object represents a different part of the application having its own logic and data to communicate within themselves.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Q2. Where does an inheritance search look for an attribute?
Ans:-An inheritance search looks for an attribute first in the instance object,then in the class the instance was createdfrom,then in all higher superclsasses
progressing from left to right(by default).The search stops at the first place the attribute is found.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3. How do you distinguish between a class object and an instance object?
Ans:-when we create a class in python then a class object is created so whenever python finds a class statement in the whole program then it creates a class object
and assigns a name to that object i.e. class name.
when we call a class, it creates an instance object of that class from which the object has been created.
Obj1=MyClass()
the above statement creates an object and names it to Obj1 which is an instance of MyClass.
-----------------------------------------------------------------------------------------------------------------------------------------------
Q4. What makes the first argument in a class’s method function special?
Ans:-The self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the 
attributes with the given arguments. The reason why we use self is that Python does not use the ‘@’ syntax to refer to instance attributes.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q5. What is the purpose of the init method?
Ans:- __init__ is a special python method that runs whenever a new object is created. These types of functions are used to initialize the attributes of that class,
E.g., if the class is Person, then the attributes will be name, age, etc.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q6. What is the process for creating a class instance?
Ans:-To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.
"This would create first object of Employee class"
emp1 = Employee("Zara", 2000)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q7. What is the process for creating a class?
Ans:-To create a class, use the keyword class:

Example
Create a class named MyClass, with a property named x:

class MyClass:
  x = 5
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q8. How would you define the superclasses of a class?
Ans:-In object-oriented programming, a class from which other classes inherit code is called a superclass.
The syntax for a subclass definition looks like this:

class DerivedClassName(BaseClassName):
    pass
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q9. What is the relationship between classes and modules?
Ans:- a module in python is simply a way to organize the code, and it contains either python classes or just functions. If you need those classes or functions
in your project, you just import them. For instance, the math module in python contains just a bunch of functions, and you just call those needed (math.sin). 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q10. How do you make instances and classes?
Ans:-When you create an object, you are creating an instance of a class, therefore "instantiating" a class.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q11. Where and how should be class attributes created?
Ans:-Class attributes belong to the class itself they will be shared by all the instances. Such attributes are defined in the class body parts usually at the top,
for legibility.To define a class attribute, you place it outside of the __init__() method.
following defines pi as a class attribute:
class Circle:
    pi = 3.14159
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q12. Where and how are instance attributes created?
Ans:-An instance attribute is a Python variable belonging to only one object. It is only accessible in the scope of the object and
it is defined inside the constructor function of a class. 
For example, __init__(self,..).
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q13. What does the term "self" in a Python class mean?
Ans:-The self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python.
It binds the attributes with the given arguments.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q14. How does a Python class handle operator overloading?
Ans:-To overload an operator  you need to provide an implementation to a particular special method in your class.Whenever you use +, a special method called __add__ is invoked.

Thus, if you want to use + on two bills, implement the __add__ method in the Bill class and define the intended behavior:
class Bill:
    def __init__(self, value):
        self.value = value
    
    def __add__(self, otherBill):
        return self.value + otherBill.value
        
five_dollars = Bill(5)
ten_dollars = Bill(10)

total = five_dollars + ten_dollars
print(total)
Output:

15
Now you can add up two instances of Bill. The + operator invokes the __add__ method, which knows how to add up two instances of Bill.

So, calling

five_dollars + ten_dollars
is equivalent to

five_dollars.__add__(ten_dollars)
Now it is possible to add up bills. But maybe you want to be able to subtract bills in a similar fashion. To do this, implement the special method called __sub__ in the Bill class:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q15. When do you consider allowing operator overloading of your classes?
Ans:-Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as 
well as join two strings and merge two lists. It is achievable because ‘+’ operator is overloaded by int class and str class. 
You might have noticed that the same built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q16. What is the most popular form of operator overloading?
Ans:-Oerator overloading is the process of using an operator in different ways depending on the operands. You can change the way an operator in Python works on different data-types.

A very popular and convenient example is the Addition (+) operator.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Ans:-class and object are two most imortant concept to grasp in order to comprehend python oop code
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q18. Describe three applications for exception processing.
Ans:-Try and Except Statement - Catching Exceptions
In Python, we catch exceptions and handle them using try and except code blocks. The try clause contains the code that can raise an exception, 
while the except clause contains the code lines that handle the exception

Try with Else Clause
Python also supports the else clause, which should come after every except clause, in the try, and except blocks.
Only when the try clause fails to throw an exception the Python interpreter goes on to the else block.

Finally Keyword in Python
The finally keyword is available in Python, and it is always used after the try-except block. The finally code block is always executed after 
the try block has terminated normally or after the try block has terminated for some other reason.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q19. What happens if you don't do something extra to treat an exception?
Ans:-The programm will get an error and furthrt not proceed until thr error is resolved.
Q20. What are your options for recovering from an exception in your script?
Ans:-
Q21. Describe two methods for triggering exceptions in your script.
Ans:-In Python, exceptions can be handled by two new methods:

Try: Catches exceptions raised by Python or a program
Raise: A custom exception that triggers an exception manually
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?
Ans:-Catches exceptions raised by Python or a program
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q24. What are the two most popular try statement variations?
Ans:-Try-except-else Clause
Try-finally Clause
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q25. What is the purpose of the raise statement?
Ans:-To trigger exceptions, we need to code raise statements. Their general form is simple: the keyword, ‘raise’, followed by the name of the exception to be raised.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q26. What does the assert statement do, and what other statement is it like?
Ans:-Assertions are statements that assert or state a fact confidently in your program. For example, while writing a division function,
you're confident the divisor shouldn't be zero, you assert divisor is not equal to zero.

Assertions are simply boolean expressions that check if the conditions return true or not. If it is true, the program does nothing and moves to the next line of code.
However, if it's false, the program stops and throws an error

It is also a debugging tool as it halts the program as soon as an error occurs and displays it.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q27. What is the purpose of the with/as argument, and what other statement is it like?
Ans:- In Python, with statement is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common 
resources like file streams.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Q28. What are *args, **kwargs?
Ans:-Arbitrary Arguments, *args
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.
The term Kwargs generally represents keyword arguments, suggesting that this format uses keyword-based Python dictionaries
This way the function will receive a tuple of arguments, and can access the items accordingly:

Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.
This way the function will receive a dictionary of arguments, and can access the items accordingly:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q29. How can I pass optional or keyword parameters from one function to another?
Ans:-To pass, collect the arguments using the * and ** in the function’s parameter list. Through this, you will get the positional arguments as a tuple and the keyword
arguments as a dictionary. Pass these arguments when calling another function by using * and ** −
def f(a, *args, **kwargs):
   ...
   kwargs['width'] = '14.3c'
   ...
   g(a, *args, **kwargs)
   -------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q30. What are Lambda Functions?
Ans:-A lambda function is a small anonymous function.

A lambda function can take any number of arguments, but can only have one expression.

Syntax
lambda arguments : expression
The expression is executed and the result is returned:

Example
Add 10 to argument a, and return the result:

x = lambda a : a + 10
print(x(5))
OUTPUT:-15
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q31. Explain Inheritance in Python with an example?
Ans:-Python Inheritance
Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.

Create a Parent Class
Any class can be a parent class, so the syntax is the same as creating any other class:

Example
Create a class named Person, with firstname and lastname properties, and a printname method:

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("Akash", "Mishra")
x.printname()
OUTPUT:- Akash Mishra
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Ans:-Python will always call the first thing that is found in the method resolution order. Since you specified the inheritance as A, B then A will be found first, so its method will be called.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Ans:-The isinstance() method checks whether an object is an instance of a class whereas issubclass() method asks whether one class is a subclass of another class
(or other classes).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q34.Explain the use of the 'nonlocal' keyword in Python.
Ans:- The nonlocal instruction is used when nested functions are implemented in the program. The nonlocal instruction is intended to change the value of an 
enclosing function variable in the body of a nested function. Thus, the nested function has access to the variables of the enclosing functions.
Using this mechanism makes it possible to maintain modifiable information about the state, which is restored on subsequent calls to the nested function.s.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q35. What is the global keyword?
Ans:-A global keyword is a keyword that allows a user to modify a variable outside the current scope. It is used to create global variables in Python from 
a non-global scope, i.e. inside a function. Global keyword is used inside a function only when we want to do assignments or when we want to change a variable.
Global is not needed for printing and accessing.
